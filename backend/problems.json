[
  {
    "problemNumber": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "category": "Array",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "defaultCode": {
      "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n    }\n};",
      "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n    }\n}",
      "c": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    // Your code here\n}"
    },
    "boilerplate": {
      "cpp": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\n{{USER_CODE}}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    \n    int n, target;\n    cin >> n >> target;\n    \n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    \n    Solution sol;\n    vector<int> result = sol.twoSum(nums, target);\n    \n    for(int i = 0; i < result.size(); i++) {\n        cout << result[i];\n        if(i < result.size() - 1) cout << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
      "java": "import java.util.*;\n\n{{USER_CODE}}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int target = sc.nextInt();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) nums[i] = sc.nextInt();\n        Solution sol = new Solution();\n        int[] result = sol.twoSum(nums, target);\n        for (int i : result) System.out.print(i + \" \");\n        System.out.println();\n    }\n}",
      "c": "#include <stdio.h>\n#include <stdlib.h>\n\n{{USER_CODE}}\n\nint main() {\n    int n, target;\n    scanf(\"%d %d\", &n, &target);\n    int* nums = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) scanf(\"%d\", &nums[i]);\n    int returnSize;\n    int* result = twoSum(nums, n, target, &returnSize);\n    for (int i = 0; i < returnSize; i++) printf(\"%d \", result[i]);\n    printf(\"\\n\");\n    free(nums);\n    free(result);\n    return 0;\n}"
    },
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9"
    ],
    "sampleInput": "nums = [2,7,11,15], target = 9",
    "sampleOutput": ["[0,1]"],
    "testCases": [
      {"input": "5 9\n2 7 11 15 3", "output": "0 1"},
      {"input": "3 3\n1 2 3", "output": "0 1"}
    ],
    "tags": ["Array", "Hash Table", "Two Pointers"],
    "companiesAskedIn": ["Google", "Amazon", "Microsoft", "Apple", "Facebook", "Uber", "Netflix", "Adobe"],
    "author": "admin"
  },
  {
    "problemNumber": 2,
    "title": "Shortest path in undirected graph with unit weights",
    "description": "Given a Undirected Graph of N vertices from 0 to N-1 and M edges and a 2D Integer array edges, where there is a edge from vertex edges[i][0] to vertex edges[i][1] of unit weight.\n\nFind the shortest path from the source to all other nodes in this graph. In this problem statement, we have assumed the source vertex to be '0'. If a vertex is unreachable from the source node, then return -1 for that vertex.",
    "difficulty": "Medium",
    "category": "Graph",
    "defaultCode": {
      "cpp": "class Solution {\npublic:\n    vector<int> shortestPath(vector<vector<int>>& edges, int N, int M) {\n        // Your code here\n    }\n};",
      "java": "class Solution {\n    public List<Integer> shortestPath(int[][] edges, int N, int M) {\n        // Your code here\n    }\n}",
      "c": "void shortestPath(int edges[][2], int N, int M) {\n    // Your code here\n}"
    },
    "boilerplate": {
      "cpp": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\n{{USER_CODE}}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    \n    int N, M;\n    cin >> N >> M;\n    \n    vector<vector<int>> edges(M, vector<int>(2));\n    for(int i = 0; i < M; i++) {\n        cin >> edges[i][0] >> edges[i][1];\n    }\n    \n    Solution sol;\n    vector<int> dist = sol.shortestPath(edges, N, M);\n    \n    for(int i = 0; i < dist.size(); i++) {\n        cout << dist[i];\n        if(i < dist.size() - 1) cout << \" \";\n    }\n    cout << endl;\n    \n    return 0;\n}",
      "java": "import java.util.*;\n\n{{USER_CODE}}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int M = sc.nextInt();\n        int[][] edges = new int[M][2];\n        for(int i = 0; i < M; i++) {\n            edges[i][0] = sc.nextInt();\n            edges[i][1] = sc.nextInt();\n        }\n        Solution sol = new Solution();\n        List<Integer> dist = sol.shortestPath(edges, N, M);\n        for(int d : dist) System.out.print(d + \" \");\n        System.out.println();\n    }\n}",
              "c": "#include <stdio.h>\n#include <stdlib.h>\n\n{{USER_CODE}}\n\nint main() {\n    int N, M;\n    scanf(\"%d %d\", &N, &M);\n    \n    int (*edges)[2] = malloc(M * sizeof(*edges));\n    for(int i = 0; i < M; i++) {\n        scanf(\"%d %d\", &edges[i][0], &edges[i][1]);\n    }\n    \n    shortestPath(edges, N, M);\n    \n    free(edges);\n    return 0;\n}"
    },
    "constraints": [
      "1 <= N <= 10^5",
      "0 <= M <= N*(N-1)/2",
      "0 <= edges[i][0], edges[i][1] < N",
      "Unit weight for all edges"
    ],
    "sampleInput": "9 10\n0 1\n0 3\n3 4\n4 5\n5 6\n1 2\n2 6\n6 7\n7 8\n6 8",
    "sampleOutput": "0 1 2 1 2 3 3 4 4",
    "testCases": [
      {"input": "9 10\n0 1\n0 3\n3 4\n4 5\n5 6\n1 2\n2 6\n6 7\n7 8\n6 8", "output": "0 1 2 1 2 3 3 4 4"},
      {"input": "4 3\n0 1\n1 2\n2 3", "output": "0 1 2 3"},
      {"input": "5 0", "output": "0 -1 -1 -1 -1"}
    ],
    "tags": ["Graph", "BFS", "Shortest Path", "Unit Weight", "Queue"],
    "companiesAskedIn": ["Google", "Amazon", "Microsoft", "Meta", "LinkedIn", "Twitter", "Airbnb", "Dropbox"],
    "author": "admin"
  }
]
